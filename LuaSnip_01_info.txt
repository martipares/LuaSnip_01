How to write snippets for LuaSnip using Lua.

https://ejmastnak.com/tutorials/vim-latex/luasnip/#loading


-----------------------------------------------------------------------

=>abbreviations


-- Two common LuaSnip abbreviations
local ls = require("luasnip")
local s = ls.snippet


-- Three progressively shorter ways to do the same thing---define a snippet
require("luasnip").snippet()
ls.snippet()
s()


-- Abbreviations used in this article and the LuaSnip docs
local ls = require("luasnip")
local s = ls.snippet
local sn = ls.snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local d = ls.dynamic_node
local fmt = require("luasnip.extras.fmt").fmt
local fmta = require("luasnip.extras.fmt").fmta
local rep = require("luasnip.extras").rep


-----------------------------------------------------------------------


=>anatomy of a LuaSnip snippet



-- Anatomy of a LuaSnip snippet
require("luasnip").snippet(
  snip_params:table,  -- table of snippet parameters
  nodes:table,        -- table of snippet nodes
  opts:table|nil      -- *optional* table of additional snippet options
)



1-snip_params
2-nodes
3-opts

return {
  -- Example: how to set snippet parameters
  require("luasnip").snippet(
    { -- Table 1: snippet parameters
      trig="hi",
      dscr="An autotriggering snippet that expands 'hi' into 'Hello, world!'",
      regTrig=false,
      priority=100,
      snippetType="autosnippet"
    },
    { -- Table 2: snippet nodes (don't worry about this for now---we'll cover nodes shortly)
      t("Hello, world!"), -- A single text node
    }
    -- Table 3, the advanced snippet options, is left blank.
  ),
}


-----------------------------------------------------------------------

=>snip_params



:help luasnip-snippets
to see the full list of table parameter keys (e.g. trig, dscr, etc.)



trig="" trigger string

priority=100 priority to 100 (the default is 1000)

snippetType="autosnippet" made the snippet autoexpand by setting


--------------------------------------------------------------------------------------------

=>nodes

tex node

  {
    t({"Line 1", "Line 2", "Line 3"})
  }


Insert node

 {
    t("\\frac{"),
    i(1),  -- insert node 1
    t("}{"),
    i(2),  -- insert node 2
    t("}")
  }


=>fmt and fmta

fmt (the full name is require("luasnip.extras.fmt").fmt )


fmta (the full name is require("luasnip.extras.fmta").fmta )


The fmta function is almost identical to fmt

fmt uses {} and fmta uses <>, in LaTeX is more convenient fmta.


=>how to call the fmta function !!!

place <> angle brackets at the positions where you want to place insert

you can use quotes for single-line strings and [[]] for multiline strings


-- \texttt snippet
"\\texttt{<>}"

-- \frac snippet
"\\frac{<>}{<>}"

-- Equation snippet, using a multiline Lua string.
-- (No need to escape backslashes in multiline strings.)
[[
  \begin{equation*}
      <>
  \end{equation*}
]]




Ex


-- fmta call for the \texttt snippet
fmta(
  "\\texttt{<>}",
  { i(1) },
)

-- Example: using fmt's `delimiters` key to manually specify angle brackets
fmt(
  "\\frac{<>}{<>}",
  {
    i(1),
    i(2)
  },
  {delimiters = "<>"} -- manually specifying angle bracket delimiters
)

-- Using a multiline string for the equation snippet
fmta(
   [[
     \begin{equation*}
         <>
     \end{equation*}
   ]],
   { i(1) }
)




=>rep()



return {
-- Code for environment snippet in the above GIF
s({trig="env", snippetType="autosnippet"},
  fmta(
    [[
      \begin{<>}
          <>
      \end{<>}
    ]],
    {
      i(1),
      i(2),
      rep(1),  -- this node repeats insert node i(1)
    }
  )
),
}


zero-index insert node i(0)
exit a equation snippet with your cursor conveniently placed inside the environmentâ€™s body




return {
-- Using a zero-index insert node to exit snippet in equation body
s({trig="eq", dscr=""},
  fmta(
    [[
      \begin{equation}
          <>
      \end{equation}
    ]],
    { i(0) }
  )
),
}



Insert node placeholder text



return {
-- Example use of insert node placeholder text
s({trig="hr", dscr="The hyperref package's href{}{} command (for url links)"},
  fmta(
    [[\href{<>}{<>}]],
    {
      i(1, "url"),
      i(2, "display name"),
    }
  )
),
}

--------------------------------------------------------------------------------------------

=>Conditional snippet expansion




Regex snippet triggers

!!!!!!!!
in
([^%a])
remove the () or it will not work

[^%a]


!!!!!!!

Keyword Matched characters

. all characters
%d digits
%a letters (uppercase and lowercase)
%w alphanumeric characters
%s white space characters

%a matches letters; %), %], and %} match closing parentheses, square brackets, and curly braces, respectively



################################


-- Prevents expansion if 'foo' is typed after letters
 s({trig = "([^%a])foo", regTrig = true, wordTrig = false}

-- Prevents expansion if 'foo' is typed after alphanumeric characters
 s({trig = "([^%w])foo", regTrig = true, wordTrig = false}

%a represents letters; the ^ character, when used in square brackets, performs negation



return {
s({trig = "([^%a])mm", wordTrig = false, regTrig = true},
  fmta(
    "<>$<>$",
    {
      f( function(_, snip) return snip.captures[1] end ),
      d(1, get_visual),
    }
  )
),
}





################################










=>Context-specific expansion for LaTeX




in_mathzone



-- Include this `in_mathzone` function at the start of a snippets file...
local in_mathzone = function()
  -- The `in_mathzone` function requires the VimTeX plugin
  return vim.fn['vimtex#syntax#in_mathzone']() == 1
end
-- Then pass the table `{condition = in_mathzone}` to any snippet you want to
-- expand only in math contexts.

return {
-- Another take on the fraction snippet without using a regex trigger
s({trig = "ff"},
  fmta(
    "\\frac{<>}{<>}",
    {
      i(1),
      i(2),
    }
  ),
  {condition = in_mathzone}  -- `condition` option passed in the snippet `opts` table
),
}



--------------------------------------------------------------------------------------------


LaTeX environments  tex_utils


-- Some LaTeX-specific conditional expansion functions (requires VimTeX)

local tex_utils = {}
tex_utils.in_mathzone = function()  -- math context detection
  return vim.fn['vimtex#syntax#in_mathzone']() == 1
end
tex_utils.in_text = function()
  return not tex_utils.in_mathzone()
end
tex_utils.in_comment = function()  -- comment detection
  return vim.fn['vimtex#syntax#in_comment']() == 1
end
tex_utils.in_env = function(name)  -- generic environment detection
    local is_inside = vim.fn['vimtex#env#is_inside'](name)
    return (is_inside[1] > 0 and is_inside[2] > 0)
end
-- A few concrete environments---adapt as needed
tex_utils.in_equation = function()  -- equation environment detection
    return tex_utils.in_env('equation')
end
tex_utils.in_itemize = function()  -- itemize environment detection
    return tex_utils.in_env('itemize')
end
tex_utils.in_tikz = function()  -- TikZ picture environment detection
    return tex_utils.in_env('tikzpicture')
end







--------------------------------------------------------------------------------------------













